public class Heap {
 
    private int[] items;
    private int size;
 
    public Heap(int length){
        items=new int[length];
    }
 
    public void insert(int value){
        if(isFull())
            throw new IllegalStateException();
            newitems = new int[2*length];
            for(int i = 0; i < length; i++){
	    	newitems[i]=items[i];
	    }
            items = new int [2*length];
	    for(int i = 0; i < length; i++){
	    	items[i]=newitems[i];
	    }
       
        items[size++]=value;
        bubbleUp();
    }
 
    public boolean isFull(){
        return size==items.length;
    }
 
    private void bubbleUp(){
        var index=size-1;
        while(index>0 && items[index]>items[parent(index)]){
            //zamiana index <-> parentIndex
            swap(index, parent(index));
            index = parent(index);
        }
    }
 
    private int parent(int index){
        return (index-1)/2;
    }
 
    private void swap(int first, int second){
        int temp=items[first];
        items[first]=items[second];
        items[second]=temp;
    }
 
 
}
